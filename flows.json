[
    {
        "id": "45cb337708a99c31",
        "type": "tab",
        "label": "blinky-DS18B20",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2c5d25cb.3428ca",
        "type": "subflow",
        "name": "App NavBar",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ca529822.9112f8",
        "type": "subflow",
        "name": "HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "99bb1519.85fc18"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "e3c68b88.d82258",
        "type": "subflow",
        "name": "App CSS",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "8341090a.df9758",
        "type": "subflow",
        "name": "App HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "966e270e.701e48"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "4d64a798844a7ddf",
        "type": "group",
        "z": "45cb337708a99c31",
        "name": "Edit Me",
        "style": {
            "fill": "#9363b7",
            "label": true,
            "label-position": "n",
            "color": "#ffff00",
            "stroke": "#001f60"
        },
        "nodes": [
            "db02e84c7ac37d30"
        ],
        "x": 994,
        "y": 19,
        "w": 172,
        "h": 82
    },
    {
        "id": "343adb1aa29a3280",
        "type": "group",
        "z": "45cb337708a99c31",
        "name": "Edit Me",
        "style": {
            "stroke": "#001f60",
            "fill": "#9363b7",
            "label": true,
            "label-position": "n",
            "color": "#ffff00"
        },
        "nodes": [
            "4f055276f3ab26d7"
        ],
        "x": 94,
        "y": 331.5,
        "w": 212,
        "h": 97
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "c104210d.418eb",
        "type": "template",
        "z": "2c5d25cb.3428ca",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <img src=\"/img/bl-mc-icon-inverse.png\" height=\"75px\"/>\n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/apps'><img src=\"/img/appsYellow.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b9df3f26.ab53f",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "d1d9e12b.926ff"
            ]
        ]
    },
    {
        "id": "895ba39c.86e59",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 690,
        "y": 40,
        "wires": [
            [
                "a9a62959.7c01e8"
            ]
        ]
    },
    {
        "id": "aa17ff35.7cdfd",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n{{{payload.extraScripts}}}\n    <style>\n{{{payload.css}}}\n    </style>\n    <style>\n{{{payload.extraCss}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "895ba39c.86e59"
            ]
        ]
    },
    {
        "id": "d1d9e12b.926ff",
        "type": "http response",
        "z": "ca529822.9112f8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 40,
        "wires": []
    },
    {
        "id": "c4ed2505.8c07e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var remoteApp = true;\n        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var project = '{{{payload.project}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n        var wsConnected = false;\n\n        function setRemoteApp(remoteAppSet)\n        {\n            remoteApp  = remoteAppSet;\n        }\n        function webSocketConnected()\n        {\n            return wsConnected;\n        }\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                wsConnected = true;\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                wsConnected = false;\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n                wsConnectC();\n            };\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n       });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n        function getCookie(extension)\n        {\n            var cookies = document.cookie.split(';');\n            var token = null;\n            var cookieName = project + extension + \"=\";\n            for (var icookie = 0; icookie < cookies.length; ++icookie)\n            {\n                var index = cookies[icookie].indexOf(cookieName);\n                if (index >= 0)\n                {\n                    token = cookies[icookie].substring(index + cookieName.length);\n                }\n            }\n            return token;\n        }\n        function sendActionMsg(topic,role,actionMsg)\n        {\n            var roleToken = \"\";\n            if (remoteApp) roleToken  = getCookie('Role');\n            if (roleToken == null)\n            {\n                location.reload();\n                return;\n            }\n            var webSocketMsg = \n            {\n                topic     : topic,\n                payload   : actionMsg,\n                userID    : userID,\n                token     : getCookie('Role'),\n                role      : role\n            };\n            ws.send(JSON.stringify(webSocketMsg));\n        }\n",
        "output": "str",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "aa17ff35.7cdfd"
            ]
        ]
    },
    {
        "id": "99bb1519.85fc18",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "Get project name and userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['project'] = global.get('project')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "c4ed2505.8c07e8"
            ]
        ]
    },
    {
        "id": "a9a62959.7c01e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "35ffcf83.1547"
            ]
        ]
    },
    {
        "id": "35ffcf83.1547",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "IP filter",
        "func": "var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 40,
        "wires": [
            [
                "b9df3f26.ab53f"
            ]
        ]
    },
    {
        "id": "f5a9eda8.5c5bc",
        "type": "template",
        "z": "e3c68b88.d82258",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #415c71;\n          --color2: #547792;\n          --color3: #9eb5c7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n       .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        input.inputLarger \n        { \n            transform: scale(3); \n            margin: 1px;\n        }\n        .googleSlide4by3-container \n        {\n            position: relative;\n            overflow: hidden;\n            padding-top: 75.0%;\n        }\n        .googleSlide4by3-iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: 0;\n        }        \n        .custom-select\n        {\n            color: black;\n            background-color: white;\n            height:80px;\n            line-height:70px;\n        }\n",
        "output": "str",
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "966e270e.701e48",
        "type": "subflow:e3c68b88.d82258",
        "z": "8341090a.df9758",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "899d0666.97b868"
            ]
        ]
    },
    {
        "id": "9460eaf0.da7628",
        "type": "subflow:ca529822.9112f8",
        "z": "8341090a.df9758",
        "name": "",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "899d0666.97b868",
        "type": "subflow:2c5d25cb.3428ca",
        "z": "8341090a.df9758",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "9460eaf0.da7628"
            ]
        ]
    },
    {
        "id": "71ae80a656c00e15",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "readTable",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "4f558eafa1cb8fd4",
                "de99bb12086ca12e"
            ]
        ]
    },
    {
        "id": "ba3c4e5cb70d7dd0",
        "type": "rpi-gpio out",
        "z": "45cb337708a99c31",
        "name": "",
        "pin": "17",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 860,
        "y": 720,
        "wires": []
    },
    {
        "id": "1def4d1ae5032f9a",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "tempAid",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "tempAid",
        "payload": "TEMPAID",
        "payloadType": "env",
        "x": 820,
        "y": 1060,
        "wires": [
            [
                "a8fe7b0c4cecea1c"
            ]
        ]
    },
    {
        "id": "a8fe7b0c4cecea1c",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Save temp ID's",
        "func": "flow.set(msg.topic,\"/sys/bus/w1/devices/\" + msg.payload + \"/temperature\")\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3241c94bcf906a77",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "tempBid",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2.1",
        "topic": "tempBid",
        "payload": "TEMPBID",
        "payloadType": "env",
        "x": 820,
        "y": 1120,
        "wires": [
            [
                "a8fe7b0c4cecea1c"
            ]
        ]
    },
    {
        "id": "4f558eafa1cb8fd4",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Temp A",
        "func": "return {topic:'tempA',payload:flow.get('tempAid')};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "d5d9dd08fae696d4",
                "f412fe87e7809fca"
            ]
        ]
    },
    {
        "id": "d5d9dd08fae696d4",
        "type": "exec",
        "z": "45cb337708a99c31",
        "command": "cat ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 720,
        "wires": [
            [
                "846a9554a8fa14d5"
            ],
            [],
            []
        ]
    },
    {
        "id": "846a9554a8fa14d5",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Decode Temp",
        "func": "var temp = -100;\nif (msg.rc.code == 0)\n{\n    temp = Number(msg.payload.split('\\n')[0]) / 1000;\n}\nelse\n{\n    node.warn('Bad RC code for ' + msg.topic);\n    return [null,null];\n}\nvar tray = global.get('tray');\ntray[msg.topic].value = temp;\nvar blueLedValue = context.get('blueLedValue');\nif (blueLedValue == undefined) blueLedValue = 1;\nif (blueLedValue == 0)\n{\n    blueLedValue = 1; \n}\nelse\n{\n    blueLedValue = 0;\n}\ncontext.set('blueLedValue', blueLedValue);\nvar sendMsg = false;\nif (msg.topic == 'tempB') sendMsg = true;\n\nreturn  [{topic:'newReading', payload:sendMsg},{topic : 'blueLed', payload : blueLedValue}];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('blueLedValue',1);",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 660,
        "wires": [
            [
                "2c8c05411a7399ab"
            ],
            [
                "ba3c4e5cb70d7dd0"
            ]
        ]
    },
    {
        "id": "f412fe87e7809fca",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 620,
        "wires": [
            [
                "b55d601169bf7e27"
            ]
        ]
    },
    {
        "id": "b55d601169bf7e27",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Temp B",
        "func": "return {topic:'tempB',payload:flow.get('tempBid')};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 660,
        "wires": [
            [
                "d5d9dd08fae696d4"
            ]
        ]
    },
    {
        "id": "de99bb12086ca12e",
        "type": "rpi-gpio out",
        "z": "45cb337708a99c31",
        "name": "",
        "pin": "27",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 320,
        "y": 720,
        "wires": []
    },
    {
        "id": "926385524886c817",
        "type": "exec",
        "z": "45cb337708a99c31",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 300,
        "y": 1060,
        "wires": [
            [
                "c3f4c3284541e453"
            ],
            [],
            []
        ]
    },
    {
        "id": "abec6da7a025b23e",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1060,
        "wires": [
            [
                "926385524886c817"
            ]
        ]
    },
    {
        "id": "c3f4c3284541e453",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStartIndex + 15));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStartIndex + 16));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nglobal.set('linkQuality',linkQuality);\nglobal.set('signalLevel', signalLevel);\nglobal.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "35ad176e0f9ebbe7",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Save tray config in Memory",
        "func": "global.set('settingInProgress', true);\nglobal.set('tray', msg.payload);\nglobal.set('deviceInit', 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 60,
        "wires": [
            [
                "db02e84c7ac37d30"
            ]
        ]
    },
    {
        "id": "cea9442bbf1d9ef3",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "read Tray",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "readTraydesc",
        "payload": "MQTTSUBSCRIBE",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "65477f85dac6a49f"
            ]
        ]
    },
    {
        "id": "675235ce94033493",
        "type": "file in",
        "z": "45cb337708a99c31",
        "name": "Read tray config",
        "filename": "tray.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 60,
        "wires": [
            [
                "0b46dcb9a34045f1"
            ]
        ]
    },
    {
        "id": "0b46dcb9a34045f1",
        "type": "json",
        "z": "45cb337708a99c31",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 650,
        "y": 60,
        "wires": [
            [
                "35ad176e0f9ebbe7"
            ]
        ]
    },
    {
        "id": "65477f85dac6a49f",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar trayProps = {\n    box         :   mqttSplit[0],\n    type        :   mqttSplit[1],\n    name        :   mqttSplit[2],\n};\nglobal.set('trayProps',trayProps);\nglobal.set('settingInProgress', false);\n\nreturn {topic: 'readFile', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "675235ce94033493"
            ]
        ]
    },
    {
        "id": "0b15ed1bf0fcb1f2",
        "type": "file",
        "z": "45cb337708a99c31",
        "name": "Init Settings",
        "filename": "tray.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1290,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "fb0c7840fa896d02",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Save Settings to File",
        "func": "var jsonPretty = JSON.stringify(global.get('tray'),null,2);\nreturn {topic: msg.payload, payload:jsonPretty};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "0b15ed1bf0fcb1f2"
            ]
        ]
    },
    {
        "id": "df4eeb29ca616a91",
        "type": "json",
        "z": "45cb337708a99c31",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "36a9e57ab4c64311"
            ]
        ]
    },
    {
        "id": "0fb8d77fb785afed",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "New Setting In",
        "links": [
            "a57e3b2ce950cffc"
        ],
        "x": 755,
        "y": 140,
        "wires": []
    },
    {
        "id": "a57e3b2ce950cffc",
        "type": "link in",
        "z": "45cb337708a99c31",
        "name": "blinkybus setting in",
        "links": [
            "0fb8d77fb785afed"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "4f055276f3ab26d7"
            ]
        ]
    },
    {
        "id": "9cf4754b3a6878ca",
        "type": "switch",
        "z": "45cb337708a99c31",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 200,
        "wires": [
            [
                "0fb8d77fb785afed"
            ],
            [
                "af7896f0de732a6d"
            ],
            [
                "1cfedf2d92b13193"
            ],
            [
                "c72b0ffe766f667b"
            ]
        ]
    },
    {
        "id": "36a9e57ab4c64311",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[4], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "9cf4754b3a6878ca"
            ]
        ]
    },
    {
        "id": "c6135f786a8e397e",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = global.get('tray');\nvar newMsg = \n{\n    topic: global.get('trayProps').box + '/' + global.get('trayProps').type + '/' + global.get('trayProps').name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "dad5d5802c6c8b60"
            ]
        ]
    },
    {
        "id": "b4b727f1ba02b3e4",
        "type": "link in",
        "z": "45cb337708a99c31",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "8ff0068af0eb8c55",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "af7896f0de732a6d",
            "c95670cfc3745177",
            "52b8878cb5fd9a01",
            "f0c1e263384a520f",
            "f5d0568e288098ed",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "39ab4d2c82b5f0b6"
        ],
        "x": 955,
        "y": 340,
        "wires": [
            [
                "c6135f786a8e397e"
            ]
        ]
    },
    {
        "id": "af7896f0de732a6d",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Ping Out",
        "links": [
            "b4b727f1ba02b3e4",
            "05c0c7b4f59ca88d"
        ],
        "x": 755,
        "y": 180,
        "wires": []
    },
    {
        "id": "c95670cfc3745177",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Create Setting out",
        "links": [
            "b4b727f1ba02b3e4",
            "05c0c7b4f59ca88d"
        ],
        "x": 355,
        "y": 380,
        "wires": []
    },
    {
        "id": "743d502c4e598d2a",
        "type": "split",
        "z": "45cb337708a99c31",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1430,
        "y": 60,
        "wires": [
            [
                "9059d3b34c3c0cb2"
            ]
        ]
    },
    {
        "id": "9059d3b34c3c0cb2",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 60,
        "wires": [
            [
                "097c8124e3834ee0"
            ]
        ]
    },
    {
        "id": "1cfedf2d92b13193",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Config Out",
        "links": [
            "52942378ceb7f650"
        ],
        "x": 755,
        "y": 220,
        "wires": []
    },
    {
        "id": "52942378ceb7f650",
        "type": "link in",
        "z": "45cb337708a99c31",
        "name": "Pause Tray Readings in",
        "links": [
            "1cfedf2d92b13193"
        ],
        "x": 55,
        "y": 520,
        "wires": [
            [
                "02237b38b16c6403"
            ]
        ]
    },
    {
        "id": "8214c5e5f17e2d2d",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Save config file",
        "func": "let cubeAlarm = global.get('tray')[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 520,
        "wires": [
            [
                "fd4bdb8a4c7f74de",
                "a8b15ae4d107cf35"
            ]
        ]
    },
    {
        "id": "43b006eec97af028",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Continue Tray readings",
        "func": "global.set('settingInProgress',false)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "52b8878cb5fd9a01"
            ]
        ]
    },
    {
        "id": "9bf343f307b2258a",
        "type": "link in",
        "z": "45cb337708a99c31",
        "name": "Save Settings to file in",
        "links": [
            "6af21e76e0c4ad80",
            "a8b15ae4d107cf35",
            "8ff0068af0eb8c55",
            "75aab98047eea696",
            "344a2a68c26672b2",
            "9f8c3b4630e734a3",
            "7f99f7031675684e"
        ],
        "x": 955,
        "y": 420,
        "wires": [
            [
                "fb0c7840fa896d02"
            ]
        ]
    },
    {
        "id": "52b8878cb5fd9a01",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Continue Devie Readings out",
        "links": [
            "b4b727f1ba02b3e4",
            "05c0c7b4f59ca88d"
        ],
        "x": 1015,
        "y": 520,
        "wires": []
    },
    {
        "id": "c72b0ffe766f667b",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Reset Out",
        "links": [
            "6c366c9b4d8b8f19"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "8ff0068af0eb8c55",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "9bf343f307b2258a",
            "b4b727f1ba02b3e4",
            "05c0c7b4f59ca88d"
        ],
        "x": 355,
        "y": 420,
        "wires": []
    },
    {
        "id": "dad00e03cf1e7677",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Allow Readings",
        "func": "if (msg.payload.address == -1)\n{\n    global.set('settingInProgress',false);\n    global.set('deviceInit', 0);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2398d32cc8de7a7d",
        "type": "link in",
        "z": "45cb337708a99c31",
        "name": "read tray config in",
        "links": [
            "961b85c2472cee35"
        ],
        "x": 935,
        "y": 100,
        "wires": [
            [
                "db02e84c7ac37d30"
            ]
        ]
    },
    {
        "id": "d071cbf1d5a4b018",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "b0f91914917b2de1"
        ],
        "x": 1835,
        "y": 60,
        "wires": []
    },
    {
        "id": "098d984d596e338e",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "b0f91914917b2de1"
        ],
        "x": 515,
        "y": 340,
        "wires": []
    },
    {
        "id": "349e422e577cac08",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 60,
        "wires": [
            [
                "743d502c4e598d2a"
            ]
        ]
    },
    {
        "id": "097c8124e3834ee0",
        "type": "switch",
        "z": "45cb337708a99c31",
        "name": "",
        "property": "payload.address",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1730,
        "y": 60,
        "wires": [
            [
                "d071cbf1d5a4b018"
            ],
            [
                "1b18db068790ab5b"
            ]
        ]
    },
    {
        "id": "1b18db068790ab5b",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1880,
        "y": 120,
        "wires": [
            [
                "dad00e03cf1e7677"
            ]
        ]
    },
    {
        "id": "a8b15ae4d107cf35",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Save config file out",
        "links": [
            "9bf343f307b2258a"
        ],
        "x": 715,
        "y": 480,
        "wires": []
    },
    {
        "id": "4f4633a52fa2feeb",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 340,
        "wires": [
            [
                "098d984d596e338e"
            ]
        ]
    },
    {
        "id": "fd4bdb8a4c7f74de",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 520,
        "wires": [
            [
                "43b006eec97af028"
            ]
        ]
    },
    {
        "id": "3fd0e9a195874fd1",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 520,
        "wires": [
            [
                "8214c5e5f17e2d2d"
            ]
        ]
    },
    {
        "id": "02237b38b16c6403",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Pause Readings",
        "func": "global.set('settingInProgress',true)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 520,
        "wires": [
            [
                "3fd0e9a195874fd1"
            ]
        ]
    },
    {
        "id": "db02e84c7ac37d30",
        "type": "function",
        "z": "45cb337708a99c31",
        "g": "4d64a798844a7ddf",
        "name": "Init Gizmo",
        "func": "var tray = global.get('tray');\nvar deviceInit = global.get('deviceInit');\nif (deviceInit == 1) //tray rebooted\n{\n    \n}\nif (deviceInit == 2) //device rebooted\n{\n    \n}\n\nvar msgs = [];\n//must be the last!\nmsgs[0] = {\"address\":-1,\"value\":0};\nreturn {topic : 'initDevice', payload: msgs};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "349e422e577cac08"
            ]
        ]
    },
    {
        "id": "4f055276f3ab26d7",
        "type": "function",
        "z": "45cb337708a99c31",
        "g": "343adb1aa29a3280",
        "name": "Create Setting",
        "func": "var tray = global.get('tray');\nvar blinkyBusSettingMsg = \n{\n    topic : msg.topic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nvar blinkyBusMessage = false;\nswitch(msg.payload.cube)\n{\n    case 'nonblinkyBusSetting':\n        tray.nonblinkyBusSetting.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nvar msgArray = [null,null,null];\nif (blinkyBusMessage)\n{\n    global.set('settingInProgress',true);\n    var settingInProgressMsg = {topic:'settingInProgress', payload:true};\n    msgArray = [blinkyBusSettingMsg, settingInProgressMsg, null];\n    \n}\nelse\n{\n    global.set('settingInProgress',false);\n    msgArray = [null,null,{topic:'settingDone', payload:true}];\n}\nreturn msgArray;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 380,
        "wires": [
            [
                "4f4633a52fa2feeb"
            ],
            [
                "c95670cfc3745177"
            ],
            [
                "8ff0068af0eb8c55"
            ]
        ]
    },
    {
        "id": "f02d0dcd29c0dee8",
        "type": "mqtt in",
        "z": "45cb337708a99c31",
        "name": "Subscribe Settings",
        "topic": "$(MQTTSUBSCRIBE)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 200,
        "wires": [
            [
                "df4eeb29ca616a91"
            ]
        ]
    },
    {
        "id": "dad5d5802c6c8b60",
        "type": "mqtt out",
        "z": "45cb337708a99c31",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 1270,
        "y": 340,
        "wires": []
    },
    {
        "id": "2c8c05411a7399ab",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Readings Alarm Scan",
        "func": "var newData = msg.payload;\nvar tray = global.get('tray');\ntray.linkQuality.value     = global.get('linkQuality');\ntray.signalLevel.value     = global.get('signalLevel');\nscalarAlarmScan(tray, 'reading');\nscalarAlarmScan(tray, 'setting');\nvar newMsg   = null;\nvar newSettingMsg = null;\nif (msg.topic == 'newSetting')\n{\n    newSettingMsg = \n    {\n        topic: 'newSetting',\n        payload: true\n    }\n}\nif (newData)\n{\n    newMsg = \n    {\n        topic: 'newData',\n        payload: true\n    }\n}\nreturn [newMsg, newSettingMsg];\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 660,
        "wires": [
            [
                "39ab4d2c82b5f0b6"
            ],
            [
                "7f99f7031675684e"
            ]
        ]
    },
    {
        "id": "39ab4d2c82b5f0b6",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "Alarm Scan out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d",
            "b4b727f1ba02b3e4"
        ],
        "x": 1215,
        "y": 640,
        "wires": []
    },
    {
        "id": "7f99f7031675684e",
        "type": "link out",
        "z": "45cb337708a99c31",
        "name": "New Setting Out",
        "mode": "link",
        "links": [
            "04d132d87ffeb91a",
            "9bf343f307b2258a"
        ],
        "x": 1215,
        "y": 680,
        "wires": []
    },
    {
        "id": "c0939e4a.6386f",
        "type": "exec",
        "z": "45cb337708a99c31",
        "command": "pm2 restart ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart",
        "x": 720,
        "y": 1340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9e290594.69c548",
        "type": "switch",
        "z": "45cb337708a99c31",
        "name": "Reset Tray",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1360,
        "wires": [
            [
                "985cd59b3e414efe"
            ],
            [
                "236a8168.66f7fe"
            ]
        ]
    },
    {
        "id": "236a8168.66f7fe",
        "type": "exec",
        "z": "45cb337708a99c31",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 520,
        "y": 1400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "557e4f40.b904e",
        "type": "delay",
        "z": "45cb337708a99c31",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1360,
        "wires": [
            [
                "9e290594.69c548"
            ]
        ]
    },
    {
        "id": "6c366c9b4d8b8f19",
        "type": "link in",
        "z": "45cb337708a99c31",
        "name": "Reset in",
        "links": [
            "c72b0ffe766f667b"
        ],
        "x": 75,
        "y": 1360,
        "wires": [
            [
                "557e4f40.b904e"
            ]
        ]
    },
    {
        "id": "6af76a294daa96eb",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Save flow env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1220,
        "wires": []
    },
    {
        "id": "10e54acd6f4f5fb4",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "pm2Name",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "pm2Name",
        "payload": "PM2NAME",
        "payloadType": "env",
        "x": 150,
        "y": 1220,
        "wires": [
            [
                "6af76a294daa96eb"
            ]
        ]
    },
    {
        "id": "985cd59b3e414efe",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Get pm2Name",
        "func": "msg.payload = global.get(\"pm2Name\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "c0939e4a.6386f"
            ]
        ]
    },
    {
        "id": "52b3da7136dc6bfc",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 160,
        "y": 840,
        "wires": [
            [
                "4e98374ed5375f06"
            ]
        ]
    },
    {
        "id": "4e98374ed5375f06",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Archive Pulse",
        "func": "var tray = global.get('tray');\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "b90bddac0cbff0f3"
            ]
        ]
    },
    {
        "id": "632ec17831656323",
        "type": "inject",
        "z": "45cb337708a99c31",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "7a50a5660d5e8d02"
            ]
        ]
    },
    {
        "id": "7a50a5660d5e8d02",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Single Archive Pulse",
        "func": "return {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 900,
        "wires": [
            [
                "b90bddac0cbff0f3"
            ]
        ]
    },
    {
        "id": "43aeb36b52f8ed23",
        "type": "mqtt out",
        "z": "45cb337708a99c31",
        "name": "Publish Archive",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 780,
        "y": 840,
        "wires": []
    },
    {
        "id": "b90bddac0cbff0f3",
        "type": "function",
        "z": "45cb337708a99c31",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = global.get('tray');\nvar newMsg = \n{\n    topic: global.get('trayProps').box + '/' + global.get('trayProps').type + '/' + global.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 840,
        "wires": [
            [
                "43aeb36b52f8ed23"
            ]
        ]
    }
]